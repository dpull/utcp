#include "gtest/gtest.h"
extern "C" void sha1_hmac_buffer(const void* Key, uint32_t KeySize, const void* Data, uint64_t DataSize, uint8_t* OutHash);

TEST(sha1, test)
{
	uint8_t result[][20] = {
		{0x53, 0x26, 0x9B, 0x98, 0x64, 0xC8, 0x65, 0x22, 0x4, 0x2C, 0x3E, 0x9B, 0x5A, 0xB7, 0x36, 0x28, 0xC5, 0xEE, 0xAD, 0x92},
		{0xA, 0x13, 0xF3, 0x43, 0x1F, 0x85, 0xB1, 0x38, 0xCF, 0x6C, 0x31, 0x32, 0x56, 0x6F, 0x68, 0xDF, 0xE7, 0x57, 0xCD, 0x7C},
		{0xA8, 0xB3, 0x5E, 0xF2, 0x7B, 0x8C, 0xC4, 0x8E, 0xC, 0x17, 0xB7, 0xB4, 0x47, 0xF4, 0x4, 0x13, 0xCB, 0xF4, 0x63, 0xA9},
		{0xE, 0x5A, 0x17, 0xA0, 0x58, 0x4E, 0x50, 0xEB, 0xA, 0x5A, 0xF4, 0x20, 0x9E, 0x2A, 0x11, 0xCB, 0xE4, 0x2E, 0xAD, 0xA2},
		{0xC8, 0xBF, 0xC5, 0x30, 0x45, 0xB3, 0x36, 0x86, 0xBD, 0x61, 0x25, 0x8D, 0xCF, 0x57, 0xA, 0xCD, 0xC3, 0x77, 0x28, 0x79},
		{0xB, 0x31, 0xBE, 0xD0, 0x8B, 0x9C, 0xD4, 0x39, 0x74, 0x7B, 0x2C, 0x62, 0x1B, 0x55, 0x13, 0xAC, 0xDC, 0x91, 0x55, 0x2B},
		{0x62, 0x5C, 0x63, 0xA, 0x2B, 0xC3, 0xC7, 0xF6, 0xEF, 0xD1, 0x85, 0xF3, 0xF7, 0x10, 0x1, 0xB7, 0x5F, 0x2B, 0x3E, 0xA8},
		{0xC9, 0x33, 0x13, 0xCB, 0x49, 0x80, 0xF0, 0xDC, 0x8A, 0x84, 0xB7, 0x2A, 0x55, 0x88, 0xB2, 0x73, 0xC2, 0x8A, 0x82, 0x2A},
		{0xCB, 0xC, 0xB6, 0xA, 0xC2, 0xB8, 0x43, 0x93, 0x55, 0x3A, 0x68, 0xC6, 0x6D, 0xC8, 0x4C, 0x79, 0xED, 0x67, 0x21, 0xDE},
		{0xC6, 0x35, 0x2E, 0x11, 0xE9, 0x90, 0x97, 0xE0, 0x86, 0x98, 0xF2, 0xA1, 0x99, 0xD7, 0x9, 0xB0, 0x48, 0x13, 0x85, 0x79},
		{0x8F, 0x1B, 0x67, 0x3E, 0x5F, 0x6C, 0x9C, 0xB0, 0x99, 0xF1, 0xEB, 0x8C, 0x31, 0xBC, 0x65, 0x60, 0x92, 0x78, 0x39, 0x69},
		{0xE0, 0x3F, 0x27, 0x80, 0xD0, 0x86, 0x7F, 0xDF, 0x21, 0x60, 0x39, 0x46, 0x9E, 0x74, 0xCB, 0x6D, 0xED, 0x54, 0x21, 0xB2},
		{0xCB, 0x4B, 0x7C, 0xAE, 0x7A, 0x27, 0xF7, 0x66, 0xAA, 0x9D, 0x68, 0x38, 0x43, 0xCD, 0x5B, 0x58, 0x2, 0xDD, 0xED, 0x6F},
		{0x65, 0xFD, 0xA6, 0x56, 0xF4, 0x2E, 0x93, 0xEF, 0x11, 0xBD, 0x5D, 0xA2, 0xE9, 0xAE, 0xAF, 0x17, 0x34, 0xC6, 0x34, 0x5A},
		{0x67, 0x23, 0x15, 0x22, 0xA0, 0xDC, 0xD9, 0xF, 0x36, 0x74, 0xC3, 0xA7, 0x55, 0xD2, 0xAE, 0xC7, 0xAD, 0x62, 0x6C, 0xFC},
		{0x7A, 0x1E, 0x39, 0x6F, 0xC4, 0x4, 0x7D, 0x19, 0x1C, 0x18, 0x8A, 0xF3, 0x16, 0x8B, 0xED, 0x1E, 0xCF, 0x35, 0xF0, 0x4B},
	};

	uint8_t HandshakeSecret[64];
	uint8_t CookieData[128];
	uint8_t Cookie[20];

	for (int i = 0; i < 16; ++i)
	{
		for (int j = 0; j < std::size(HandshakeSecret); ++j)
		{
			HandshakeSecret[j] = i + j * 2;
		}

		for (int j = 0; j < std::size(CookieData); ++j)
		{
			CookieData[j] = i + j;
		}

		sha1_hmac_buffer(HandshakeSecret, std::size(HandshakeSecret), CookieData, 100 + i, Cookie);
		ASSERT_EQ(memcmp(Cookie, result[i], std::size(Cookie)), 0);
	}
}
